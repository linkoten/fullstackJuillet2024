datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  stripeCustomerId String? @unique
  subscription Subscription[]
  notes Notes[]
cart Cart? // Relation to Cart
  }

model Post {
  id            Int      @id @default(autoincrement())
  title         String
  code          String   
  language      String
  totalLikes    Int      @default(0)
  totalComments Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  stripeSubscriptionId String @id @unique
  interval String
  status String 
  planId String
  currentPeriodStart Int
  currentPeriodEnd Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

model Notes {
  id String @id @unique @default(cuid())
  title String?
  description String?
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  userId String 
}





model Products {
  id String @id @unique @default(cuid())
  title String?
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  price Int
  stock Int
  image String
  CartItems   CartItem[]
}

model Cart {
  id        String  @id @default(cuid())
  userId    String @unique
  user      User    @relation(fields: [userId], references: [id])
  cartItems     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  product   Products @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id]) // Relation to Cart

  @@unique([cartId, productId])

}